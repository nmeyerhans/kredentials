#MIN_CONFIG(3.0.0)

AM_INIT_AUTOMAKE(kredentials, 0.1)
AC_C_BIGENDIAN
AC_CHECK_KDEMAXPATHLEN

AC_DEFUN([CHECK_KERBEROS],
# Check whether user wants Kerberos 5 support
[
KRB5_MSG="no"
AC_ARG_WITH(kerberos5,
	[  --with-kerberos5=PATH   Enable Kerberos 5 support @<:@/usr/local@:>@],
	[
		KRB5ROOT=${withval}
	],
	[
		KRB5ROOT=[/usr/local]
	]
)
if test -n "${KRB5ROOT}"
then
	CPPFLAGS="$CPPFLAGS -I${KRB5ROOT}/include"
	LDFLAGS="$LDFLAGS -L${KRB5ROOT}/lib"
	AC_DEFINE(KRB5, 1, 
	[Need Kerberos 5])
	KRB5_MSG="yes"
	AC_MSG_CHECKING(checking for Kerberos headers)
	AC_CHECK_HEADERS(krb5.h)
	if test "$ac_cv_header_krb5_h" != yes; then
		AC_MSG_ERROR(Can't find krb5.h)
	fi
	AC_MSG_CHECKING(whether we are using Heimdal)
	AC_TRY_COMPILE([ #include <krb5.h> ],
			[ char *tmp = heimdal_version; ],
			[ AC_MSG_RESULT(yes)
				AC_DEFINE(HEIMDAL, 1,
				[Need Heimdal Kerberos])
				K5LIBS="-lkrb5 -ldes -lcom_err -lasn1 -lroken"
			],
			[ AC_MSG_RESULT(no)
				K5LIBS="-lkrb5 -lk5crypto -lcom_err"
			]
	)
	AC_CHECK_LIB(krb5, krb5_init_context, ,
	AC_MSG_ERROR([Can't find kerberos libraries]))
	if test ! -z "$need_dash_r" ; then
		LDFLAGS="$LDFLAGS -R${KRB5ROOT}/lib"
	fi
	if test ! -z "$blibpath" ; then
		blibpath="$blibpath:${KRB5ROOT}/lib"
	fi
	AC_CHECK_LIB(resolv, dn_expand, , )

	AC_CHECK_LIB(gssapi,gss_init_sec_context,
		[ AC_DEFINE(GSSAPI, 1,
			[need GSSAPI libraries])
			K5LIBS="-lgssapi $K5LIBS" ],
		[ AC_CHECK_LIB(gssapi_krb5,gss_init_sec_context,
			[ AC_DEFINE(GSSAPI)
				K5LIBS="-lgssapi_krb5 $K5LIBS" ],
			AC_MSG_WARN([Cannot find any suitable gss-api library - build may fail]),
			$K5LIBS)
		],
		$K5LIBS)

	AC_CHECK_HEADER(gssapi.h, ,
		[ unset ac_cv_header_gssapi_h
			CPPFLAGS="$CPPFLAGS -I${KRB5ROOT}/include/gssapi -I/usr/include/gssapi"
			AC_CHECK_HEADERS(gssapi.h, ,
			AC_MSG_WARN([Cannot find any suitable gss-api header - build may fail])
			)
		]
	)

	oldCPP="$CPPFLAGS"
	CPPFLAGS="$CPPFLAGS -I${KRB5ROOT}/include/gssapi"
	AC_CHECK_HEADER(gssapi_krb5.h, ,
			[ CPPFLAGS="$oldCPP" ])

	KRB5=yes
fi

])

CHECK_KERBEROS
